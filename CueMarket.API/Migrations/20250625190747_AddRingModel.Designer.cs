// <auto-generated />
using System;
using CueMarket.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CueMarket.API.Migrations
{
    [DbContext(typeof(CueMarketDbContext))]
    [Migration("20250625190747_AddRingModel")]
    partial class AddRingModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CueMarket.API.Models.Domain.Butt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Butts");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Cue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ButtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JointType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShaftAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShaftBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShaftCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShaftDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShaftEId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ButtId");

                    b.HasIndex("ShaftAId");

                    b.HasIndex("ShaftBId");

                    b.HasIndex("ShaftCId");

                    b.HasIndex("ShaftDId");

                    b.HasIndex("ShaftEId");

                    b.ToTable("Cues");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Ferrule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Capped")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Ferrules");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Ring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Rings");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Shaft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollarMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FerruleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RingAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TipId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CollarMaterialId");

                    b.HasIndex("FerruleId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RingAId");

                    b.HasIndex("TipId");

                    b.ToTable("Shafts");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Tip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Cue", b =>
                {
                    b.HasOne("CueMarket.API.Models.Domain.Butt", "Butt")
                        .WithMany()
                        .HasForeignKey("ButtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Shaft", "ShaftA")
                        .WithMany()
                        .HasForeignKey("ShaftAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Shaft", "ShaftB")
                        .WithMany()
                        .HasForeignKey("ShaftBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Shaft", "ShaftC")
                        .WithMany()
                        .HasForeignKey("ShaftCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Shaft", "ShaftD")
                        .WithMany()
                        .HasForeignKey("ShaftDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Shaft", "ShaftE")
                        .WithMany()
                        .HasForeignKey("ShaftEId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Butt");

                    b.Navigation("ShaftA");

                    b.Navigation("ShaftB");

                    b.Navigation("ShaftC");

                    b.Navigation("ShaftD");

                    b.Navigation("ShaftE");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Ferrule", b =>
                {
                    b.HasOne("CueMarket.API.Models.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Ring", b =>
                {
                    b.HasOne("CueMarket.API.Models.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Shaft", b =>
                {
                    b.HasOne("CueMarket.API.Models.Domain.Material", "CollarMaterial")
                        .WithMany()
                        .HasForeignKey("CollarMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Ferrule", "Ferrule")
                        .WithMany()
                        .HasForeignKey("FerruleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Ring", "RingA")
                        .WithMany()
                        .HasForeignKey("RingAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CueMarket.API.Models.Domain.Tip", "Tip")
                        .WithMany()
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollarMaterial");

                    b.Navigation("Ferrule");

                    b.Navigation("Material");

                    b.Navigation("RingA");

                    b.Navigation("Tip");
                });

            modelBuilder.Entity("CueMarket.API.Models.Domain.Tip", b =>
                {
                    b.HasOne("CueMarket.API.Models.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });
#pragma warning restore 612, 618
        }
    }
}
